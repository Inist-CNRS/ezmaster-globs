#!/usr/bin/env bash
################################################################################
#
# GLoBS / libs / std.rc
# 
# Bibliothèque de fonctions standards utilisées par l'installeur de GLoBS
#
# @author : INIST-CNRS/DPI
#
################################################################################

#-------------------------------------------------------------------------------
# Initialisation de variables globales
#-------------------------------------------------------------------------------
# TRUE or FALSE ?
TRUE=0
FALSE=1
PROXY_INIST=0
PROXY_ADSL=2

# PROXY
INIST_HTTP_PROXY="http://proxyout.inist.fr:8080"
INIST_HTTPS_PROXY="http://proxyout.inist.fr:8080"
INIST_FTP_PROXY="http://proxyout.inist.fr:8080"
INIST_PROXYPAC="http://proxypac.intra.inist.fr/proxy.pac"
INIST_NO_PROXY="localhost,127.0.0.0/8,172.16.0.0/16,0.0.0.0,*.inist.fr,*.local"
INIST_PROXY_ADDRESS="http://proxyout.inist.fr"
INIST_PROXY_PORT="8080"

# PROXY ADSL
INIST_HTTP_ADSL_PROXY="http://adsl.inist.fr:8080"
INIST_HTTPS_ADSL_PROXY="https://adsl.inist.fr:8080"
INIST_FTP_ADSL_PROXY="http://adsl.inist.fr:8080"
INIST_ADSL_PROXYPAC="http://proxypac.intra.inist.fr/proxy.pac"
INIST_ADSL_PROXY_ADDRESS="http://adsl.inist.fr"
INIST_ADSL_PROXY_PORT="8080"

# RÉSEAU
HOST_IP_ADDRESS=$(hostname -I | cut -d " " -f1)

# User / Group / Sudo
SUDO="$(which sudo) -u root"

# Dépendances logicielles
GLoBS_dependencies="git httpd ssh parallel"

#-------------------------------------------------------------------------------
# Détermination de la plateforme et de sa version et la version du noyau
#-------------------------------------------------------------------------------

# --- Distribution
is_debian=$(cat /etc/issue | grep -i "debian")
is_ubuntu=$(cat /etc/issue | grep -i "ubuntu")

if [ "$is_debian" ]; then
  HOST_SYSTEM="debian"
elif [ "$is_ubuntu" ]; then
  HOST_SYSTEM="ubuntu"
else
  HOST_SYSTEM="autre"
fi

# --- Version de la distribution
if [ $HOST_SYSTEM == 'ubuntu' ]; then
  osReleaseVersion=$(cat /etc/os-release | grep "VERSION=")
  # un joli bashisme pour la forme (merci askUbuntu)
  HOST_SYSTEM_CODENAME=$(echo ${osReleaseVersion/*, /} | cut -d '"' -f 1)
  HOST_SYSTEM_VERSION_RAW=$(cat /etc/lsb-release | grep -i "DISTRIB_RELEASE" | cut -d "=" -f 2)
  HOST_SYSTEM_VERSION_MAJOR=$(echo "$HOST_SYSTEM_VERSION_RAW" | cut -d"." -f 1)
  HOST_SYSTEM_VERSION_MINOR=$(echo "$HOST_SYSTEM_VERSION_RAW" | cut -d"." -f 2)
  HOST_SYSTEM_VERSION="$HOST_SYSTEM_VERSION_MAJOR.$HOST_SYSTEM_VERSION_MINOR"
  if [ $HOST_SYSTEM_VERSION == "16.04" ]; then
      HOST_SYSTEM_CODENAME=$(echo ${osReleaseVersion/*, /} | cut -d '"' -f 2)
  fi
elif [ $HOST_SYSTEM == 'debian' ]; then
  debianCodename=$(lsb_release -a 2>/dev/null | grep -i "codename" | tr -d "\t" | cut -d ":" -f2)
  HOST_SYSTEM_CODENAME=$(echo "$debianCodename" | tr '[A-Z]' '[a-z]')
  HOST_SYSTEM_VERSION=$(cat /etc/debian_version)
  HOST_SYSTEM_VERSION_MAJOR=$(echo "$HOST_SYSTEM_VERSION" | cut -d"." -f 1)
  HOST_SYSTEM_VERSION_MINOR=$(echo "$HOST_SYSTEM_VERSION" | cut -d"." -f 2)
fi
  
# --- Version du noyau
HOST_KERNEL_MAJOR=$(uname -r | cut -d'.' -f1)
HOST_KERNEL_MINOR=$(uname -r | cut -d'.' -f2)
HOST_KERNEL="$HOST_KERNEL_MAJOR.$HOST_KERNEL_MINOR"

#-------------------------------------------------------------------------------
# Message en console uniquement
# (mais en plus joli)
# $1 : type de message
# $2 : contenu du message
#-------------------------------------------------------------------------------
function  _globs_std_consoleMessage {
  case "$1" in

    # Information
    info|INFO)
      printf "${FG_BR_GREEN}[INFO]\t\t${FG_WHITE}$2${RESET_ALL}\n"
    ;;

    # Warning
    attention|ATTENTION|warning|WARNING)
      printf "${FG_BR_YELLOW}[WARNING]\t${FG_WHITE}$2${RESET_ALL}\n"
    ;;

    # Erreur
    erreur|ERREUR|error|ERROR)
      printf "${FG_BR_RED}[ERREUR]\t${FG_WHITE}$2${RESET_ALL}\n"
    ;;

    # Aide
    aide|AIDE|help|HELP)
      printf "${FG_BLUE}[AIDE]\t\t${FG_WHITE}$2${RESET_ALL}\n"
    ;;

    # Action (sert à indiquer une action en cours qui se terminera par un OK
    # ou un NOK)
    action|ACTION)
      printf "${FG_BR_BLUE}[EN COURS]\t${FG_WHITE}$2${RESET_ALL}"
    ;;
    
    # Check/OK
    check|CHECK|ok|OK)
      printf "${FG_BR_GREEN} ✔ ${FG_WHITE}$2${RESET_ALL}\n"
    ;;

    # NoCheck/NOK
    nocheck|NOCHECK|nok|NOK)
      printf "${FG_BR_RED} ✘ ${FG_WHITE}$2${RESET_ALL}\n"
    ;;

    # TITLE
    title|TITLE)
      printf "${FG_GREEN}${FS_BOLD}$2${RESET_ALL}\n"
    ;;
    
    # Tout le reste...
    *)
      printf "\n"
    ;;

  esac
}

#-------------------------------------------------------------------------------
# Affichage de la version
#-------------------------------------------------------------------------------
function _globs_std_show_version {
  echo -e "$MODULE_NAME est en version ${FG_BR_BLUE}${BG_BLUE}${FS_BOLD}$MODULE_VERSION${RESET_ALL}\nSystème : $HOST_SYSTEM\nVersion : $HOST_SYSTEM_VERSION ($HOST_SYSTEM_CODENAME)\nNoyau   : $HOST_KERNEL\n"
}

#-------------------------------------------------------------------------------
# Vérification de l'existance d'un binaire
# (retourne 0 si trouvé, 1 si non trouvé)
#-------------------------------------------------------------------------------
function _globs_std_check_command {
  # Argument $1 vide => ERREUR
  if [ ! -z "$1" ]; then
    if [ ! -z $(which "$1") ]; then
      return $TRUE
    else
      _globs_std_consoleMessage "ERROR" "$1 est introuvable (ou pas installé)"
      return $FALSE
    fi
  fi
  return $FALSE
}

#-------------------------------------------------------------------------------
# Crée un backup d'un fichier...
# (notamment avant la modification des confs)
#-------------------------------------------------------------------------------
function _globs_std_backup {
  local FILE="$1"
  # On vérifie que c'est bien un fichier
  if [ ! -f "$FILE" ]; then
    _globs_std_consoleMessage "ERREUR" "« $FILE » n'est pas un fichier"
    return $FALSE
  fi
  
  #
  DIRNAME=$(which dirname)
  BASENAME=$(which basename)
  
  # Chemin absolu du fichier
  local ABS_FILE=$(readlink -f "$FILE")
  
  # Quel est le répertoire de ce fichier ?
  # local FILE_DIR=$(DIRNAME "$FILE")
  
  # Quel est le nom de ce fichier ?
  # local FILE_NAME=$(BASENAME "$FILE")
  # local FILE_NAME_WITHOUT_EXTENSION="${FILE_NAME%.*}"
  
  # Création du nom de backup en fonction de la date du jour
  # local TIMESTAMP=$(date +%Y-%m-%d@%H-%M-%S)
  # local NEW_FILE_NAME="$FILE_DIR/$FILE_NAME_WITHOUT_EXTENSION.inist.$TIMESTAMP"
  local NEW_FILE_NAME="${ABS_FILE}_inist-tools-backup"
  
  # Copie + vérification
  if cp "$FILE" "$NEW_FILE_NAME" ; then
    _globs_std_consoleMessage "INFO" "Le fichier « $FILE » a été backupé vers « $NEW_FILE_NAME »."
    return $TRUE
  else
    _globs_std_consoleMessage "ERREUR" "Le backup de « $FILE » vers « $NEW_FILE_NAME » n'a pas fonctionné."
    return $FALSE
  fi
}

